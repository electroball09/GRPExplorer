@using System.Runtime.InteropServices
@using System.Diagnostics;
@using GRiPE.Code.Types;
@using System.Text.Json;
@using System.Threading;

@inject WebGLShaderCache shaderCache
<MudPaper Elevation="0" MaxHeight="100%" Class="ma-2 pb-4 overflow-scroll">
    <div class="display:fixed width:400px height:250px">
        <BECanvas Width="400" Height="250" @ref="_canvas" />
    </div>

    <MudText>@string.Format("{0:F3}", delta)</MudText>
    <MudText>@string.Format("{0:F3}", time)</MudText>
    <MudText>@string.Format("{0:F3}", measuredDelta)</MudText>
    <MudNumericField @bind-Value="maxDelta" />
    <MudButton OnClick="UpdateUI">Update UI</MudButton>

    <MudText>PLACEHOLDER TEXT</MudText>
    <MudText>PLACEHOLDER TEXT</MudText>
    <MudText>PLACEHOLDER TEXT</MudText>
    <MudText>PLACEHOLDER TEXT</MudText>
    <MudText>PLACEHOLDER TEXT</MudText>
    <MudText>PLACEHOLDER TEXT</MudText>
    <MudText>PLACEHOLDER TEXT</MudText>
    <MudText>PLACEHOLDER TEXT</MudText>
    <MudText>PLACEHOLDER TEXT</MudText>
    <MudText>PLACEHOLDER TEXT</MudText>
    <MudText>PLACEHOLDER TEXT</MudText>
    <MudText>PLACEHOLDER TEXT</MudText>
    <MudText>PLACEHOLDER TEXT</MudText>
    <MudText>PLACEHOLDER TEXT</MudText>
    <MudText>PLACEHOLDER TEXT</MudText>
    <MudText>PLACEHOLDER TEXT</MudText>
    <MudText>PLACEHOLDER TEXT</MudText>
    <MudText>PLACEHOLDER TEXT</MudText>
    <MudText>PLACEHOLDER TEXT</MudText>
    <MudText>PLACEHOLDER TEXT</MudText>
    <MudText>PLACEHOLDER TEXT</MudText>
    <MudText>PLACEHOLDER TEXT</MudText>
    <MudText>PLACEHOLDER TEXT</MudText>
    <MudText>PLACEHOLDER TEXT</MudText>
    <MudText>PLACEHOLDER TEXT</MudText>
    <MudText>PLACEHOLDER TEXT</MudText>
    <MudText>PLACEHOLDER TEXT</MudText>
    <MudText>PLACEHOLDER TEXT</MudText>
    <MudText>PLACEHOLDER TEXT</MudText>
    <MudText>PLACEHOLDER TEXT</MudText>
    <MudText>PLACEHOLDER TEXT</MudText>
    <MudText>PLACEHOLDER TEXT</MudText>
    <MudText>PLACEHOLDER TEXT</MudText>
    <MudText>PLACEHOLDER TEXT</MudText>
    <MudText>PLACEHOLDER TEXT</MudText>
    <MudText>PLACEHOLDER TEXT</MudText>
    <MudText>PLACEHOLDER TEXT</MudText>
    <MudText>PLACEHOLDER TEXT</MudText>
    <MudText>PLACEHOLDER TEXT</MudText>
    <MudText>PLACEHOLDER TEXT</MudText>
</MudPaper>

@*<PointsDisplay Points="@points" @ref="pointsDisplay" />*@

@code
{
    BECanvasComponent? _canvas;
    WebGLContext? _gl;
    PointsDisplay? pointsDisplay;

    DateTime initTime;

    double time = 0;
    double delta = 0;
    double measuredDelta = 0;

    Stopwatch deltaWatch = new Stopwatch();

    double maxDelta = 16.6667;

    List<GRiPERenderer> renderersToDraw = new List<GRiPERenderer>();
    BasicPointRenderer points = new BasicPointRenderer();
    BasicLineRenderer lines = new BasicLineRenderer();

    static int delay = 0;
    static SemaphoreSlim semaphore = new SemaphoreSlim(1, 1);

    protected void UpdateUI()
    {
        //pointsDisplay!.Update();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        await Task.Delay(500);
        await semaphore.WaitAsync();

        initTime = DateTime.UtcNow;

        _gl = await _canvas.CreateWebGLAsync();

        Point p = new Point() { color = new(0, 1, 0, .25f), size = 5f };
        points.Points.Add(p);
        points.Points.Add(p);

        lines.Lines.Add(new Line
        {
            start = new(-1, -1),
            end = new(1, 1),
            color = new(0, 0, 1, 1)
        });
        lines.Lines.Add(new Line
        {
            start = new(1, 1),
            end = new(-1, .5f),
            color = new(0, 0, 1, 1)
        });

        await points.InitResources(_gl, shaderCache);
        await lines.InitResources(_gl, shaderCache);

        renderersToDraw.Add(points);
        renderersToDraw.Add(lines);
        //pointsDisplay!.Update();

        Random r = new();
        semaphore.Release();

        while (true)
        {
            await _gl.BeginBatchAsync();
            await BeginRenderLoop();

            points.Points.Modify(0, 
                (ref Point point) =>
                {
                    point.position = new Vector2(-(float)Math.Sin(time * 1.8426f + 1.4675) * 0.95f, -(float)Math.Sin(time));
                });
            points.Points.Modify(1, 
                (ref Point point) => 
                {
                    point.position = new Vector2((float)Math.Sin(time + .874), (float)Math.Sin(time * 1.2589f));
                    point.color = new((float)(Math.Sin(time) + 1) / 10 + .3f, (float)Math.Sin(time * 2), (float)Math.Sin(time * .5f), 1f);
                    point.size = (float)((Math.Sin(time * 1.5) + 1) * 10 + 5);
                });

            foreach (var renderer in renderersToDraw)
                await renderer.Render(_gl, shaderCache);
                
            await _gl.EndBatchAsync();
            await EndRenderLoop();

            var delay = Math.Clamp(maxDelta - delta, 0, maxDelta);
            await Task.Delay(TimeSpan.FromMilliseconds(delay));
        }
    }

    private async Task BeginRenderLoop()
    {
        time = (DateTime.UtcNow - initTime).TotalSeconds;
        measuredDelta = deltaWatch.Elapsed.TotalMilliseconds;
        deltaWatch.Restart();

        await _gl!.ClearColorAsync(0, 0, 0, 1);
        await _gl.ClearAsync(BufferBits.COLOR_BUFFER_BIT);
    }

    private async Task EndRenderLoop()
    {
        await Task.CompletedTask;
        delta = ((double)deltaWatch.ElapsedTicks / Stopwatch.Frequency) * 1000f;
    }
}
